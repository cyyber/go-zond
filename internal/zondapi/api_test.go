// Copyright 2023 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package zondapi

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"math/big"
	"os"
	"path/filepath"
	"reflect"
	"slices"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	"github.com/theQRL/go-qrllib/dilithium"
	"github.com/theQRL/go-zond"
	"github.com/theQRL/go-zond/accounts"
	"github.com/theQRL/go-zond/common"
	"github.com/theQRL/go-zond/common/hexutil"
	"github.com/theQRL/go-zond/consensus"
	"github.com/theQRL/go-zond/consensus/beacon"
	"github.com/theQRL/go-zond/core"
	"github.com/theQRL/go-zond/core/bloombits"
	"github.com/theQRL/go-zond/core/rawdb"
	"github.com/theQRL/go-zond/core/state"
	"github.com/theQRL/go-zond/core/types"
	"github.com/theQRL/go-zond/core/vm"
	"github.com/theQRL/go-zond/crypto"
	"github.com/theQRL/go-zond/crypto/pqcrypto"
	"github.com/theQRL/go-zond/event"
	"github.com/theQRL/go-zond/internal/blocktest"
	"github.com/theQRL/go-zond/params"
	"github.com/theQRL/go-zond/rpc"
	"github.com/theQRL/go-zond/zonddb"
)

func testTransactionMarshal(t *testing.T, tests []txData, config *params.ChainConfig) {
	t.Parallel()
	var (
		signer = types.LatestSigner(config)
		key, _ = pqcrypto.HexToDilithium("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
	)

	for i, tt := range tests {
		var tx2 types.Transaction
		tx, err := types.SignNewTx(key, signer, tt.Tx)
		if err != nil {
			t.Fatalf("test %d: signing failed: %v", i, err)
		}
		// Regular transaction
		if data, err := json.Marshal(tx); err != nil {
			t.Fatalf("test %d: marshalling failed; %v", i, err)
		} else if err = tx2.UnmarshalJSON(data); err != nil {
			t.Fatalf("test %d: sunmarshal failed: %v", i, err)
		} else if want, have := tx.Hash(), tx2.Hash(); want != have {
			t.Fatalf("test %d: stx changed, want %x have %x", i, want, have)
		}

		// rpcTransaction
		rpcTx := newRPCTransaction(tx, common.Hash{}, 0, 0, nil, config)
		if data, err := json.Marshal(rpcTx); err != nil {
			t.Fatalf("test %d: marshalling failed; %v", i, err)
		} else if err = tx2.UnmarshalJSON(data); err != nil {
			t.Fatalf("test %d: unmarshal failed: %v", i, err)
		} else if want, have := tx.Hash(), tx2.Hash(); want != have {
			t.Fatalf("test %d: tx changed, want %x have %x", i, want, have)
		} else {
			want, have := tt.Want, string(data)
			require.JSONEqf(t, want, have, "test %d: rpc json not match, want %s have %s", i, want, have)
		}
	}
}

func TestTransaction_RoundTripRpcJSON(t *testing.T) {
	var (
		config = params.AllBeaconProtocolChanges
		tests  = allTransactionTypes(common.Address{0xde, 0xad}, config)
	)
	testTransactionMarshal(t, tests, config)
}

type txData struct {
	Tx   types.TxData
	Want string
}

func allTransactionTypes(addr common.Address, config *params.ChainConfig) []txData {
	return []txData{
		// TODO(rgeraldes24): legacy txs
		/*
			{
				Tx: &types.LegacyTx{
					Nonce:    5,
					GasPrice: big.NewInt(6),
					Gas:      7,
					To:       &addr,
					Value:    big.NewInt(8),
					Data:     []byte{0, 1, 2, 3, 4},
					Signature: []byte{},
					PublicKey: []byte{},
				},
				Want: `{
					"blockHash": null,
					"blockNumber": null,
					"from": "0x20a1a68e6818a1142f85671db01ef7226debf822",
					"gas": "0x7",
					"gasPrice": "0x6",
					"hash": "0x5f3240454cd09a5d8b1c5d651eefae7a339262875bcd2d0e6676f3d989967008",
					"input": "0x0001020304",
					"nonce": "0x5",
					"to": "0xdead000000000000000000000000000000000000",
					"transactionIndex": null,
					"value": "0x8",
					"type": "0x0",
					"chainId": "0x539",
					"signature": "0xbc85e96592b95f7160825d837abb407f009df9ebe8f1b9158a4b8dd093377f75",
					"publicKey": "0x1b55ea3af5574c536967b039ba6999ef6c89cf22fc04bcb296e0e8b0b9b576f5"
				}`,
			}, {
				Tx: &types.LegacyTx{
					Nonce:    5,
					GasPrice: big.NewInt(6),
					Gas:      7,
					To:       nil,
					Value:    big.NewInt(8),
					Data:     []byte{0, 1, 2, 3, 4},
					Signature: []byte{},
					PublicKey: []byte{},
				},
				Want: `{
					"blockHash": null,
					"blockNumber": null,
					"from": "0x20a1a68e6818a1142f85671db01ef7226debf822",
					"gas": "0x7",
					"gasPrice": "0x6",
					"hash": "0x806e97f9d712b6cb7e781122001380a2837531b0fc1e5f5d78174ad4cb699873",
					"input": "0x0001020304",
					"nonce": "0x5",
					"to": null,
					"transactionIndex": null,
					"value": "0x8",
					"type": "0x0",
					"chainId": "0x539",
					"v": "0xa96",
					"r": "0x9dc28b267b6ad4e4af6fe9289668f9305c2eb7a3241567860699e478af06835a",
					"s": "0xa0b51a071aa9bed2cd70aedea859779dff039e3630ea38497d95202e9b1fec7"
				}`,
			},
		*/
		// TODO(rgeraldes24)
		/*
			{
				Tx: &types.AccessListTx{
					ChainID:  config.ChainID,
					Nonce:    5,
					GasPrice: big.NewInt(6),
					Gas:      7,
					To:       &addr,
					Value:    big.NewInt(8),
					Data:     []byte{0, 1, 2, 3, 4},
					AccessList: types.AccessList{
						types.AccessTuple{
							Address:     common.Address{0x2},
							StorageKeys: []common.Hash{types.EmptyRootHash},
						},
					},
					Signature: []byte{},
					PublicKey: []byte{},
				},
				Want: `{
						"blockHash": null,
						"blockNumber": null,
						"from": "0x20a1a68e6818a1142f85671db01ef7226debf822",
						"gas": "0x7",
						"gasPrice": "0x6",
						"hash": "0x29de99297e0b91ad1d46a641ce8b49e610c974916b5b29ea02944cbd7fecbf46",
						"input": "0x0001020304",
						"nonce": "0x5",
						"to": "0xdead000000000000000000000000000000000000",
						"transactionIndex": null,
						"value": "0x8",
						"type": "0x1",
						"accessList": [
							{
								"address": "0x0200000000000000000000000000000000000000",
								"storageKeys": [
									"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
								]
							}
						],
						"chainId": "0x539",
						"signature": "",
						"publicKey": "0x01727d783cc48b50060e8d3cf86eb8f37a5fe0dd49beb6c79e77aa4243aed4acdc5bed459f9ce1aaee191558c4791a698778f22ae0b670dbc963f9dff974c5c4c7bdf86504364cd48ecbd37c990758e92abc82f9ab42eefac09b5c307064540751421eff33e436f05f59c0a43a3c1b93442fb8b75bc4ca7156310162c935c50dfea28b8f8cb3409edb3a3b8242ddc9320f97e2e9f3d50f4428d791d7969e412ba10a2b22c6229395dd86f86261104f3cf37617d370d28f484b2605828f03b017d898baf4b4631212baef96e81c017dab349d8189a70f07bfe86240d5f5a33802ca794072aef09b4171b153af2b33a8b375a113438d271cb0fe625d76e8fcca390dcbb924abf7ac9bc5e6ea6ec38cc7b4fb38ac22ded5d9280260c53f87186e8a1f44eeca54fd915015daeaa57fa3493130dbc0e3b664df05bce6cfbe8c10c1a7b7963ec5d9f6e044995050bc169b62de61e37e91eb83e0f21aa11018edd4f2587b2c907e1f99fc93a30935a9a16c828e778acb8d04e70e6a4cf248a1f23088fcde603ae156e538c1f2cc07e959f1a0d5d8771ee207284edc9e5f34785f708a9f1395cdbbd17fdfaa0792d9ffa1af4dec2907b603698bc71621df7e34c6adf001951252b97d69590d7cbf7a102734aca33b3a337ce3deec222f2b8b61c45ad189a75dd30746ec7c9700fccf361b94b23564c974bd024b89a52d3f225d0b562e4500b51e0c447caeff5eb760d781c416aabf702c079baad87fdb18c61d50cc8827e407fe088a8da4575a92e13093d24c63ff37ac70bb2a6be9631891b0dd570a7fbb73bb66d489058ac89c46db31576a38dbe2a206a31f48751b45e1bf7934fd8fc2d242273aa1261ca679a6ce693a458a5a33d47d8b7a8aa61f62060424bcf911f147206c475842c16dd801e4ac32a8223215ad3a4e59deb4df0597a612c330af5a787f05327cc5cac9e8a9d151adfb0413b5a68f124d9f1cbe753137061f5beb8ec2b9be66ea23076f2d6da6624a983f76ad92235315a3883c2a321b013586c055941514d3a6d448ff1d6cef057e4ca26b944d44086f4df7970371464c56151221cb808f0e00818cd0ffa916b78e696132ccc71a795949a39f2a5a6acff20998c085e640c901f251998d15d6cb7092dc48e69284e4836e634db47664f926697055252be841a5a79603f8a2a419650a6f1ad7c6bdb11a391bdea76f4f68be08922f5ef08bff8c0d02d5aded7907642cc6cca4fd594f0fe4700efd15827ae2f4a9c7f8f629498f1992e4cb575ed9bedb1927bd57bde751624a34c8438892ac114cbe1aac962cf4fe199d2ff2a23cb1f8c3a3e6d78a8b44b66d8f25c3702bebbfb1974698ac701d263561a32cec56574e1eb9f289fac40fa441296d79ae4f0f51c8e9a50d7acc1779b5a47a806c692a1c49e99fafb63d2149eeb175aa7ef584cbb5504211fbe6585e30ba0edbb717decc3494ee984d5f3e56089f14ce7222c6573833377881a861fd763e4fb667c9e76c860ffdee0771465f5a37aad543e3fa5f024996dba344f6a1c24b245a45adc6a18ac4dd08bb0307910724007e344ad302b534dcf7dd2ac3966bd3668486ba361ac1390155c0e1334d3a79c631f889bb26dda72449129d4441e795f2c124cde229d4daf79bc9f15c562fc0f6faa47f6b757cf4c7d0d6271c1e47f3d01ac02938eef495ca61e051617f32693a17abacf604722025f72660979716407f15d56a71b1427019b2b8897a7991f6d9bead653b537670bf4c5e7bc54b8745b533ab4bb96b588bdeb2b4f713f25477688737dde64107d82feabc00a2689f27b1b58161b6281d9edd647b8d23e9442f2123c93365f6805cf903b8a802a2de6d5622407cb9d88512fcc9ba9f18c90cfaa80e1e9f985e9849c8b91d9cdc1f862135f6583aed4f5471124408a89081c0e14789ce8f2444dee55f789387e6e48e6212fd271a1e3a55de0c1e122c8772dc32d1ca77284eb4649e86ae6e5569a4cf840166970a21d79c50a8fc9b2d1c144ee79885ffdbc22737b03a110b3522ea5c26ae99f950aec20411cd1c2466df4d90c3ffe2ed9116b6c23a63299f6d7bbcf2a37368765d170297d900ca346fa60f0e6a3fccf2a01548219982c5e49444771e64619089da4c6263df7ac2693d9037800f68607a34d7eeb489b1a93030488d7cd407f4f2ab561701d884d7eeea39f79cf2f25c4da089f34ea3f3dc15da1bc43da8e7c12d1e0c05b107f10da1ea5a684331f2ecb696734b47407dc51a15ab9c9b98f31a42cb2e771696ab39378bbcfec21021bc42ffb1488920229589505bb6fc771edddb1818a081a5b8fc90eefba70091ea3fed3fe81f95f721570662eed03cfd759fb064e2401e634072557f025cce8affff8c062381b5e0291fb016292b5403848b419037d9bb6190045eb19454c2ea2debec95eb9d7f76f9546c922f96d1a04c537594ef5d26b226821a3527cebd56ac950c54e7fa0557e017e9a5974ae7defbe1fb3ba3037f89d12ea7f85253ef885af0da7b1e60a8637d1197b795a9d663723b94f1806b2938b5da325877d7b85ec544bbf311f75cb7e17999518cb473a5cb7875ba4e59a904cc09992313ee3f44890498af5443d983a4ad2669fee3c47d592e788c56419b1e93bdaa5434ce895506adde41e75f89dce82e6fc78cf0b85850808037c172d5a44848525d1f06cc7f3610adf434ae21c1313c438eaf9b0cd4d18d4f402279a7db469080ee807630b0388046551ca3476914e3a2a2abc0b7fc211fc17a48c0b42800406738dce93b19a64dcc3cb93435ec117462ddcfd396daf99acd0bf2037a21fce0a46dbbfd974121669287f409a778b538f862eade58da183e9bd37c763a16f56b15d8d0c8ab6326189ca7116c587b87659ae82be17639362ecaa78f7ad346ae82a8f85bdf0ddc38054b9239ce975ee723ffc854ae4d028c20dae5d7cbd1b110dd749049c89878f797a20fc15ea9f6839c130253d4fa6d506fecd3605a8dfa35b13ff61e2f9d865224df588cf8d51d00341b8c607b64158903c171d76e7b303d0d1349374f6f06f080db74f55ecbbf8a038cc209bc4d86d63d9c8b7309a423b29048abdfb8849196bdea7a2a55a9b6f3c4e8019cc80bde6e6ddff2bac293c50f4f739a21331495b960a242d2d126832283f09a9d0ef145ca9cd5b513c7d72e2670717709e169e03d4d618ba6c319ac03a4c65cf7cdd050745f0ce0f7872fff4640741284ee26f1585e05978e53e1fff5a89322e9b770bc29c697e9843157f9f797f37ed45f9992e333d780fb71ea992624c195d0e8dc008877a5adaa89d8aef5b6533c2481208a946a5b32f3c95e4e518fc1c2e76bbceee2ce18703ce38e86cc09bdfda8b90c0beb6a7ce0321f9f8acd27f93800cc79dfd671825974516554e68ed1953a80d9e1a51717f06e2392612843eb73783eb74d1db18ee8c56929ac41bec655957cccf68ab3810cfb099aea1a1d7e064afe0b248d60d8aca916bc5529555ad94af922481f535f60a060ec63b887b183378355a827dc0da8a87fef209dd79ad207c482423f2d45fd4e4e8019122afe9bf5e4fac379567c13f44c35061fbdab4939f429354f4841cb1f15ec30fd69b361596e1259edb9f506a80dcd5a17786f4eb8e35fc1556fc9fbdf18d9"
					}`,
			},
		*/
		// TODO(rgeraldes24)
		/*
			{
				Tx: &types.AccessListTx{
					ChainID:  config.ChainID,
					Nonce:    5,
					GasPrice: big.NewInt(6),
					Gas:      7,
					To:       nil,
					Value:    big.NewInt(8),
					Data:     []byte{0, 1, 2, 3, 4},
					AccessList: types.AccessList{
						types.AccessTuple{
							Address:     common.Address{0x2},
							StorageKeys: []common.Hash{types.EmptyRootHash},
						},
					},
					PublicKey: []byte{},
					Signature: []byte{},
				},
				Want: `{
						"blockHash": null,
						"blockNumber": null,
						"from": "0x20a1a68e6818a1142f85671db01ef7226debf822",
						"gas": "0x7",
						"gasPrice": "0x6",
						"hash": "0x6d525131c30e62acaeb10a835d12bca36fe9cc52d8b7a7421149fb9b86d07a44",
						"input": "0x0001020304",
						"nonce": "0x5",
						"to": null,
						"transactionIndex": null,
						"value": "0x8",
						"type": "0x1",
						"accessList": [
							{
								"address": "0x0200000000000000000000000000000000000000",
								"storageKeys": [
									"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
								]
							}
						],
						"chainId": "0x539",
						"signature": "",
						"publicKey": "0x01727d783cc48b50060e8d3cf86eb8f37a5fe0dd49beb6c79e77aa4243aed4acdc5bed459f9ce1aaee191558c4791a698778f22ae0b670dbc963f9dff974c5c4c7bdf86504364cd48ecbd37c990758e92abc82f9ab42eefac09b5c307064540751421eff33e436f05f59c0a43a3c1b93442fb8b75bc4ca7156310162c935c50dfea28b8f8cb3409edb3a3b8242ddc9320f97e2e9f3d50f4428d791d7969e412ba10a2b22c6229395dd86f86261104f3cf37617d370d28f484b2605828f03b017d898baf4b4631212baef96e81c017dab349d8189a70f07bfe86240d5f5a33802ca794072aef09b4171b153af2b33a8b375a113438d271cb0fe625d76e8fcca390dcbb924abf7ac9bc5e6ea6ec38cc7b4fb38ac22ded5d9280260c53f87186e8a1f44eeca54fd915015daeaa57fa3493130dbc0e3b664df05bce6cfbe8c10c1a7b7963ec5d9f6e044995050bc169b62de61e37e91eb83e0f21aa11018edd4f2587b2c907e1f99fc93a30935a9a16c828e778acb8d04e70e6a4cf248a1f23088fcde603ae156e538c1f2cc07e959f1a0d5d8771ee207284edc9e5f34785f708a9f1395cdbbd17fdfaa0792d9ffa1af4dec2907b603698bc71621df7e34c6adf001951252b97d69590d7cbf7a102734aca33b3a337ce3deec222f2b8b61c45ad189a75dd30746ec7c9700fccf361b94b23564c974bd024b89a52d3f225d0b562e4500b51e0c447caeff5eb760d781c416aabf702c079baad87fdb18c61d50cc8827e407fe088a8da4575a92e13093d24c63ff37ac70bb2a6be9631891b0dd570a7fbb73bb66d489058ac89c46db31576a38dbe2a206a31f48751b45e1bf7934fd8fc2d242273aa1261ca679a6ce693a458a5a33d47d8b7a8aa61f62060424bcf911f147206c475842c16dd801e4ac32a8223215ad3a4e59deb4df0597a612c330af5a787f05327cc5cac9e8a9d151adfb0413b5a68f124d9f1cbe753137061f5beb8ec2b9be66ea23076f2d6da6624a983f76ad92235315a3883c2a321b013586c055941514d3a6d448ff1d6cef057e4ca26b944d44086f4df7970371464c56151221cb808f0e00818cd0ffa916b78e696132ccc71a795949a39f2a5a6acff20998c085e640c901f251998d15d6cb7092dc48e69284e4836e634db47664f926697055252be841a5a79603f8a2a419650a6f1ad7c6bdb11a391bdea76f4f68be08922f5ef08bff8c0d02d5aded7907642cc6cca4fd594f0fe4700efd15827ae2f4a9c7f8f629498f1992e4cb575ed9bedb1927bd57bde751624a34c8438892ac114cbe1aac962cf4fe199d2ff2a23cb1f8c3a3e6d78a8b44b66d8f25c3702bebbfb1974698ac701d263561a32cec56574e1eb9f289fac40fa441296d79ae4f0f51c8e9a50d7acc1779b5a47a806c692a1c49e99fafb63d2149eeb175aa7ef584cbb5504211fbe6585e30ba0edbb717decc3494ee984d5f3e56089f14ce7222c6573833377881a861fd763e4fb667c9e76c860ffdee0771465f5a37aad543e3fa5f024996dba344f6a1c24b245a45adc6a18ac4dd08bb0307910724007e344ad302b534dcf7dd2ac3966bd3668486ba361ac1390155c0e1334d3a79c631f889bb26dda72449129d4441e795f2c124cde229d4daf79bc9f15c562fc0f6faa47f6b757cf4c7d0d6271c1e47f3d01ac02938eef495ca61e051617f32693a17abacf604722025f72660979716407f15d56a71b1427019b2b8897a7991f6d9bead653b537670bf4c5e7bc54b8745b533ab4bb96b588bdeb2b4f713f25477688737dde64107d82feabc00a2689f27b1b58161b6281d9edd647b8d23e9442f2123c93365f6805cf903b8a802a2de6d5622407cb9d88512fcc9ba9f18c90cfaa80e1e9f985e9849c8b91d9cdc1f862135f6583aed4f5471124408a89081c0e14789ce8f2444dee55f789387e6e48e6212fd271a1e3a55de0c1e122c8772dc32d1ca77284eb4649e86ae6e5569a4cf840166970a21d79c50a8fc9b2d1c144ee79885ffdbc22737b03a110b3522ea5c26ae99f950aec20411cd1c2466df4d90c3ffe2ed9116b6c23a63299f6d7bbcf2a37368765d170297d900ca346fa60f0e6a3fccf2a01548219982c5e49444771e64619089da4c6263df7ac2693d9037800f68607a34d7eeb489b1a93030488d7cd407f4f2ab561701d884d7eeea39f79cf2f25c4da089f34ea3f3dc15da1bc43da8e7c12d1e0c05b107f10da1ea5a684331f2ecb696734b47407dc51a15ab9c9b98f31a42cb2e771696ab39378bbcfec21021bc42ffb1488920229589505bb6fc771edddb1818a081a5b8fc90eefba70091ea3fed3fe81f95f721570662eed03cfd759fb064e2401e634072557f025cce8affff8c062381b5e0291fb016292b5403848b419037d9bb6190045eb19454c2ea2debec95eb9d7f76f9546c922f96d1a04c537594ef5d26b226821a3527cebd56ac950c54e7fa0557e017e9a5974ae7defbe1fb3ba3037f89d12ea7f85253ef885af0da7b1e60a8637d1197b795a9d663723b94f1806b2938b5da325877d7b85ec544bbf311f75cb7e17999518cb473a5cb7875ba4e59a904cc09992313ee3f44890498af5443d983a4ad2669fee3c47d592e788c56419b1e93bdaa5434ce895506adde41e75f89dce82e6fc78cf0b85850808037c172d5a44848525d1f06cc7f3610adf434ae21c1313c438eaf9b0cd4d18d4f402279a7db469080ee807630b0388046551ca3476914e3a2a2abc0b7fc211fc17a48c0b42800406738dce93b19a64dcc3cb93435ec117462ddcfd396daf99acd0bf2037a21fce0a46dbbfd974121669287f409a778b538f862eade58da183e9bd37c763a16f56b15d8d0c8ab6326189ca7116c587b87659ae82be17639362ecaa78f7ad346ae82a8f85bdf0ddc38054b9239ce975ee723ffc854ae4d028c20dae5d7cbd1b110dd749049c89878f797a20fc15ea9f6839c130253d4fa6d506fecd3605a8dfa35b13ff61e2f9d865224df588cf8d51d00341b8c607b64158903c171d76e7b303d0d1349374f6f06f080db74f55ecbbf8a038cc209bc4d86d63d9c8b7309a423b29048abdfb8849196bdea7a2a55a9b6f3c4e8019cc80bde6e6ddff2bac293c50f4f739a21331495b960a242d2d126832283f09a9d0ef145ca9cd5b513c7d72e2670717709e169e03d4d618ba6c319ac03a4c65cf7cdd050745f0ce0f7872fff4640741284ee26f1585e05978e53e1fff5a89322e9b770bc29c697e9843157f9f797f37ed45f9992e333d780fb71ea992624c195d0e8dc008877a5adaa89d8aef5b6533c2481208a946a5b32f3c95e4e518fc1c2e76bbceee2ce18703ce38e86cc09bdfda8b90c0beb6a7ce0321f9f8acd27f93800cc79dfd671825974516554e68ed1953a80d9e1a51717f06e2392612843eb73783eb74d1db18ee8c56929ac41bec655957cccf68ab3810cfb099aea1a1d7e064afe0b248d60d8aca916bc5529555ad94af922481f535f60a060ec63b887b183378355a827dc0da8a87fef209dd79ad207c482423f2d45fd4e4e8019122afe9bf5e4fac379567c13f44c35061fbdab4939f429354f4841cb1f15ec30fd69b361596e1259edb9f506a80dcd5a17786f4eb8e35fc1556fc9fbdf18d9"
					}`,
			},
		*/
		{
			Tx: &types.DynamicFeeTx{
				ChainID:   config.ChainID,
				Nonce:     5,
				GasTipCap: big.NewInt(6),
				GasFeeCap: big.NewInt(9),
				Gas:       7,
				To:        &addr,
				Value:     big.NewInt(8),
				Data:      []byte{0, 1, 2, 3, 4},
				AccessList: types.AccessList{
					types.AccessTuple{
						Address:     common.Address{0x2},
						StorageKeys: []common.Hash{types.EmptyRootHash},
					},
				},
				Signature: []byte{},
				PublicKey: []byte{},
			},
			Want: `{
				"blockHash": null,
				"blockNumber": null,
				"from": "0x20a1a68e6818a1142f85671db01ef7226debf822",
				"gas": "0x7",
				"gasPrice": "0x9",
				"maxFeePerGas": "0x9",
				"maxPriorityFeePerGas": "0x6",
				"hash": "0x88232264d509b4bfd84f5f1f9efc73ef8f1c4b478e5c7a945ff6296b6bd154e4",
				"input": "0x0001020304",
				"nonce": "0x5",
				"to": "0xdead000000000000000000000000000000000000",
				"transactionIndex": null,
				"value": "0x8",
				"type": "0x2",
				"accessList": [
					{
						"address": "0x0200000000000000000000000000000000000000",
						"storageKeys": [
							"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
						]
					}
				],
				"chainId": "0x539",
				"signature": "",
				"publicKey": "0x01727d783cc48b50060e8d3cf86eb8f37a5fe0dd49beb6c79e77aa4243aed4acdc5bed459f9ce1aaee191558c4791a698778f22ae0b670dbc963f9dff974c5c4c7bdf86504364cd48ecbd37c990758e92abc82f9ab42eefac09b5c307064540751421eff33e436f05f59c0a43a3c1b93442fb8b75bc4ca7156310162c935c50dfea28b8f8cb3409edb3a3b8242ddc9320f97e2e9f3d50f4428d791d7969e412ba10a2b22c6229395dd86f86261104f3cf37617d370d28f484b2605828f03b017d898baf4b4631212baef96e81c017dab349d8189a70f07bfe86240d5f5a33802ca794072aef09b4171b153af2b33a8b375a113438d271cb0fe625d76e8fcca390dcbb924abf7ac9bc5e6ea6ec38cc7b4fb38ac22ded5d9280260c53f87186e8a1f44eeca54fd915015daeaa57fa3493130dbc0e3b664df05bce6cfbe8c10c1a7b7963ec5d9f6e044995050bc169b62de61e37e91eb83e0f21aa11018edd4f2587b2c907e1f99fc93a30935a9a16c828e778acb8d04e70e6a4cf248a1f23088fcde603ae156e538c1f2cc07e959f1a0d5d8771ee207284edc9e5f34785f708a9f1395cdbbd17fdfaa0792d9ffa1af4dec2907b603698bc71621df7e34c6adf001951252b97d69590d7cbf7a102734aca33b3a337ce3deec222f2b8b61c45ad189a75dd30746ec7c9700fccf361b94b23564c974bd024b89a52d3f225d0b562e4500b51e0c447caeff5eb760d781c416aabf702c079baad87fdb18c61d50cc8827e407fe088a8da4575a92e13093d24c63ff37ac70bb2a6be9631891b0dd570a7fbb73bb66d489058ac89c46db31576a38dbe2a206a31f48751b45e1bf7934fd8fc2d242273aa1261ca679a6ce693a458a5a33d47d8b7a8aa61f62060424bcf911f147206c475842c16dd801e4ac32a8223215ad3a4e59deb4df0597a612c330af5a787f05327cc5cac9e8a9d151adfb0413b5a68f124d9f1cbe753137061f5beb8ec2b9be66ea23076f2d6da6624a983f76ad92235315a3883c2a321b013586c055941514d3a6d448ff1d6cef057e4ca26b944d44086f4df7970371464c56151221cb808f0e00818cd0ffa916b78e696132ccc71a795949a39f2a5a6acff20998c085e640c901f251998d15d6cb7092dc48e69284e4836e634db47664f926697055252be841a5a79603f8a2a419650a6f1ad7c6bdb11a391bdea76f4f68be08922f5ef08bff8c0d02d5aded7907642cc6cca4fd594f0fe4700efd15827ae2f4a9c7f8f629498f1992e4cb575ed9bedb1927bd57bde751624a34c8438892ac114cbe1aac962cf4fe199d2ff2a23cb1f8c3a3e6d78a8b44b66d8f25c3702bebbfb1974698ac701d263561a32cec56574e1eb9f289fac40fa441296d79ae4f0f51c8e9a50d7acc1779b5a47a806c692a1c49e99fafb63d2149eeb175aa7ef584cbb5504211fbe6585e30ba0edbb717decc3494ee984d5f3e56089f14ce7222c6573833377881a861fd763e4fb667c9e76c860ffdee0771465f5a37aad543e3fa5f024996dba344f6a1c24b245a45adc6a18ac4dd08bb0307910724007e344ad302b534dcf7dd2ac3966bd3668486ba361ac1390155c0e1334d3a79c631f889bb26dda72449129d4441e795f2c124cde229d4daf79bc9f15c562fc0f6faa47f6b757cf4c7d0d6271c1e47f3d01ac02938eef495ca61e051617f32693a17abacf604722025f72660979716407f15d56a71b1427019b2b8897a7991f6d9bead653b537670bf4c5e7bc54b8745b533ab4bb96b588bdeb2b4f713f25477688737dde64107d82feabc00a2689f27b1b58161b6281d9edd647b8d23e9442f2123c93365f6805cf903b8a802a2de6d5622407cb9d88512fcc9ba9f18c90cfaa80e1e9f985e9849c8b91d9cdc1f862135f6583aed4f5471124408a89081c0e14789ce8f2444dee55f789387e6e48e6212fd271a1e3a55de0c1e122c8772dc32d1ca77284eb4649e86ae6e5569a4cf840166970a21d79c50a8fc9b2d1c144ee79885ffdbc22737b03a110b3522ea5c26ae99f950aec20411cd1c2466df4d90c3ffe2ed9116b6c23a63299f6d7bbcf2a37368765d170297d900ca346fa60f0e6a3fccf2a01548219982c5e49444771e64619089da4c6263df7ac2693d9037800f68607a34d7eeb489b1a93030488d7cd407f4f2ab561701d884d7eeea39f79cf2f25c4da089f34ea3f3dc15da1bc43da8e7c12d1e0c05b107f10da1ea5a684331f2ecb696734b47407dc51a15ab9c9b98f31a42cb2e771696ab39378bbcfec21021bc42ffb1488920229589505bb6fc771edddb1818a081a5b8fc90eefba70091ea3fed3fe81f95f721570662eed03cfd759fb064e2401e634072557f025cce8affff8c062381b5e0291fb016292b5403848b419037d9bb6190045eb19454c2ea2debec95eb9d7f76f9546c922f96d1a04c537594ef5d26b226821a3527cebd56ac950c54e7fa0557e017e9a5974ae7defbe1fb3ba3037f89d12ea7f85253ef885af0da7b1e60a8637d1197b795a9d663723b94f1806b2938b5da325877d7b85ec544bbf311f75cb7e17999518cb473a5cb7875ba4e59a904cc09992313ee3f44890498af5443d983a4ad2669fee3c47d592e788c56419b1e93bdaa5434ce895506adde41e75f89dce82e6fc78cf0b85850808037c172d5a44848525d1f06cc7f3610adf434ae21c1313c438eaf9b0cd4d18d4f402279a7db469080ee807630b0388046551ca3476914e3a2a2abc0b7fc211fc17a48c0b42800406738dce93b19a64dcc3cb93435ec117462ddcfd396daf99acd0bf2037a21fce0a46dbbfd974121669287f409a778b538f862eade58da183e9bd37c763a16f56b15d8d0c8ab6326189ca7116c587b87659ae82be17639362ecaa78f7ad346ae82a8f85bdf0ddc38054b9239ce975ee723ffc854ae4d028c20dae5d7cbd1b110dd749049c89878f797a20fc15ea9f6839c130253d4fa6d506fecd3605a8dfa35b13ff61e2f9d865224df588cf8d51d00341b8c607b64158903c171d76e7b303d0d1349374f6f06f080db74f55ecbbf8a038cc209bc4d86d63d9c8b7309a423b29048abdfb8849196bdea7a2a55a9b6f3c4e8019cc80bde6e6ddff2bac293c50f4f739a21331495b960a242d2d126832283f09a9d0ef145ca9cd5b513c7d72e2670717709e169e03d4d618ba6c319ac03a4c65cf7cdd050745f0ce0f7872fff4640741284ee26f1585e05978e53e1fff5a89322e9b770bc29c697e9843157f9f797f37ed45f9992e333d780fb71ea992624c195d0e8dc008877a5adaa89d8aef5b6533c2481208a946a5b32f3c95e4e518fc1c2e76bbceee2ce18703ce38e86cc09bdfda8b90c0beb6a7ce0321f9f8acd27f93800cc79dfd671825974516554e68ed1953a80d9e1a51717f06e2392612843eb73783eb74d1db18ee8c56929ac41bec655957cccf68ab3810cfb099aea1a1d7e064afe0b248d60d8aca916bc5529555ad94af922481f535f60a060ec63b887b183378355a827dc0da8a87fef209dd79ad207c482423f2d45fd4e4e8019122afe9bf5e4fac379567c13f44c35061fbdab4939f429354f4841cb1f15ec30fd69b361596e1259edb9f506a80dcd5a17786f4eb8e35fc1556fc9fbdf18d9"
			}`,
		},
		{
			Tx: &types.DynamicFeeTx{
				ChainID:    config.ChainID,
				Nonce:      5,
				GasTipCap:  big.NewInt(6),
				GasFeeCap:  big.NewInt(9),
				Gas:        7,
				To:         nil,
				Value:      big.NewInt(8),
				Data:       []byte{0, 1, 2, 3, 4},
				AccessList: types.AccessList{},
				Signature:  []byte{},
				PublicKey:  []byte{},
			},
			Want: `{
					"blockHash": null,
					"blockNumber": null,
					"from": "0x20a1a68e6818a1142f85671db01ef7226debf822",
					"gas": "0x7",
					"gasPrice": "0x9",
					"maxFeePerGas": "0x9",
					"maxPriorityFeePerGas": "0x6",
					"hash": "0xf897dd01bb279e3500cac8aea4fad94b9957dee7131378edb4633c72a3a1298e",
					"input": "0x0001020304",
					"nonce": "0x5",
					"to": null,
					"transactionIndex": null,
					"value": "0x8",
					"type": "0x2",
					"accessList": [],
					"chainId": "0x539",
					"signature": "",
					"publicKey": "0x01727d783cc48b50060e8d3cf86eb8f37a5fe0dd49beb6c79e77aa4243aed4acdc5bed459f9ce1aaee191558c4791a698778f22ae0b670dbc963f9dff974c5c4c7bdf86504364cd48ecbd37c990758e92abc82f9ab42eefac09b5c307064540751421eff33e436f05f59c0a43a3c1b93442fb8b75bc4ca7156310162c935c50dfea28b8f8cb3409edb3a3b8242ddc9320f97e2e9f3d50f4428d791d7969e412ba10a2b22c6229395dd86f86261104f3cf37617d370d28f484b2605828f03b017d898baf4b4631212baef96e81c017dab349d8189a70f07bfe86240d5f5a33802ca794072aef09b4171b153af2b33a8b375a113438d271cb0fe625d76e8fcca390dcbb924abf7ac9bc5e6ea6ec38cc7b4fb38ac22ded5d9280260c53f87186e8a1f44eeca54fd915015daeaa57fa3493130dbc0e3b664df05bce6cfbe8c10c1a7b7963ec5d9f6e044995050bc169b62de61e37e91eb83e0f21aa11018edd4f2587b2c907e1f99fc93a30935a9a16c828e778acb8d04e70e6a4cf248a1f23088fcde603ae156e538c1f2cc07e959f1a0d5d8771ee207284edc9e5f34785f708a9f1395cdbbd17fdfaa0792d9ffa1af4dec2907b603698bc71621df7e34c6adf001951252b97d69590d7cbf7a102734aca33b3a337ce3deec222f2b8b61c45ad189a75dd30746ec7c9700fccf361b94b23564c974bd024b89a52d3f225d0b562e4500b51e0c447caeff5eb760d781c416aabf702c079baad87fdb18c61d50cc8827e407fe088a8da4575a92e13093d24c63ff37ac70bb2a6be9631891b0dd570a7fbb73bb66d489058ac89c46db31576a38dbe2a206a31f48751b45e1bf7934fd8fc2d242273aa1261ca679a6ce693a458a5a33d47d8b7a8aa61f62060424bcf911f147206c475842c16dd801e4ac32a8223215ad3a4e59deb4df0597a612c330af5a787f05327cc5cac9e8a9d151adfb0413b5a68f124d9f1cbe753137061f5beb8ec2b9be66ea23076f2d6da6624a983f76ad92235315a3883c2a321b013586c055941514d3a6d448ff1d6cef057e4ca26b944d44086f4df7970371464c56151221cb808f0e00818cd0ffa916b78e696132ccc71a795949a39f2a5a6acff20998c085e640c901f251998d15d6cb7092dc48e69284e4836e634db47664f926697055252be841a5a79603f8a2a419650a6f1ad7c6bdb11a391bdea76f4f68be08922f5ef08bff8c0d02d5aded7907642cc6cca4fd594f0fe4700efd15827ae2f4a9c7f8f629498f1992e4cb575ed9bedb1927bd57bde751624a34c8438892ac114cbe1aac962cf4fe199d2ff2a23cb1f8c3a3e6d78a8b44b66d8f25c3702bebbfb1974698ac701d263561a32cec56574e1eb9f289fac40fa441296d79ae4f0f51c8e9a50d7acc1779b5a47a806c692a1c49e99fafb63d2149eeb175aa7ef584cbb5504211fbe6585e30ba0edbb717decc3494ee984d5f3e56089f14ce7222c6573833377881a861fd763e4fb667c9e76c860ffdee0771465f5a37aad543e3fa5f024996dba344f6a1c24b245a45adc6a18ac4dd08bb0307910724007e344ad302b534dcf7dd2ac3966bd3668486ba361ac1390155c0e1334d3a79c631f889bb26dda72449129d4441e795f2c124cde229d4daf79bc9f15c562fc0f6faa47f6b757cf4c7d0d6271c1e47f3d01ac02938eef495ca61e051617f32693a17abacf604722025f72660979716407f15d56a71b1427019b2b8897a7991f6d9bead653b537670bf4c5e7bc54b8745b533ab4bb96b588bdeb2b4f713f25477688737dde64107d82feabc00a2689f27b1b58161b6281d9edd647b8d23e9442f2123c93365f6805cf903b8a802a2de6d5622407cb9d88512fcc9ba9f18c90cfaa80e1e9f985e9849c8b91d9cdc1f862135f6583aed4f5471124408a89081c0e14789ce8f2444dee55f789387e6e48e6212fd271a1e3a55de0c1e122c8772dc32d1ca77284eb4649e86ae6e5569a4cf840166970a21d79c50a8fc9b2d1c144ee79885ffdbc22737b03a110b3522ea5c26ae99f950aec20411cd1c2466df4d90c3ffe2ed9116b6c23a63299f6d7bbcf2a37368765d170297d900ca346fa60f0e6a3fccf2a01548219982c5e49444771e64619089da4c6263df7ac2693d9037800f68607a34d7eeb489b1a93030488d7cd407f4f2ab561701d884d7eeea39f79cf2f25c4da089f34ea3f3dc15da1bc43da8e7c12d1e0c05b107f10da1ea5a684331f2ecb696734b47407dc51a15ab9c9b98f31a42cb2e771696ab39378bbcfec21021bc42ffb1488920229589505bb6fc771edddb1818a081a5b8fc90eefba70091ea3fed3fe81f95f721570662eed03cfd759fb064e2401e634072557f025cce8affff8c062381b5e0291fb016292b5403848b419037d9bb6190045eb19454c2ea2debec95eb9d7f76f9546c922f96d1a04c537594ef5d26b226821a3527cebd56ac950c54e7fa0557e017e9a5974ae7defbe1fb3ba3037f89d12ea7f85253ef885af0da7b1e60a8637d1197b795a9d663723b94f1806b2938b5da325877d7b85ec544bbf311f75cb7e17999518cb473a5cb7875ba4e59a904cc09992313ee3f44890498af5443d983a4ad2669fee3c47d592e788c56419b1e93bdaa5434ce895506adde41e75f89dce82e6fc78cf0b85850808037c172d5a44848525d1f06cc7f3610adf434ae21c1313c438eaf9b0cd4d18d4f402279a7db469080ee807630b0388046551ca3476914e3a2a2abc0b7fc211fc17a48c0b42800406738dce93b19a64dcc3cb93435ec117462ddcfd396daf99acd0bf2037a21fce0a46dbbfd974121669287f409a778b538f862eade58da183e9bd37c763a16f56b15d8d0c8ab6326189ca7116c587b87659ae82be17639362ecaa78f7ad346ae82a8f85bdf0ddc38054b9239ce975ee723ffc854ae4d028c20dae5d7cbd1b110dd749049c89878f797a20fc15ea9f6839c130253d4fa6d506fecd3605a8dfa35b13ff61e2f9d865224df588cf8d51d00341b8c607b64158903c171d76e7b303d0d1349374f6f06f080db74f55ecbbf8a038cc209bc4d86d63d9c8b7309a423b29048abdfb8849196bdea7a2a55a9b6f3c4e8019cc80bde6e6ddff2bac293c50f4f739a21331495b960a242d2d126832283f09a9d0ef145ca9cd5b513c7d72e2670717709e169e03d4d618ba6c319ac03a4c65cf7cdd050745f0ce0f7872fff4640741284ee26f1585e05978e53e1fff5a89322e9b770bc29c697e9843157f9f797f37ed45f9992e333d780fb71ea992624c195d0e8dc008877a5adaa89d8aef5b6533c2481208a946a5b32f3c95e4e518fc1c2e76bbceee2ce18703ce38e86cc09bdfda8b90c0beb6a7ce0321f9f8acd27f93800cc79dfd671825974516554e68ed1953a80d9e1a51717f06e2392612843eb73783eb74d1db18ee8c56929ac41bec655957cccf68ab3810cfb099aea1a1d7e064afe0b248d60d8aca916bc5529555ad94af922481f535f60a060ec63b887b183378355a827dc0da8a87fef209dd79ad207c482423f2d45fd4e4e8019122afe9bf5e4fac379567c13f44c35061fbdab4939f429354f4841cb1f15ec30fd69b361596e1259edb9f506a80dcd5a17786f4eb8e35fc1556fc9fbdf18d9"
				}`,
		},
	}
}

type testBackend struct {
	db      zonddb.Database
	chain   *core.BlockChain
	pending *types.Block
}

func newTestBackend(t *testing.T, n int, gspec *core.Genesis, engine consensus.Engine, generator func(i int, b *core.BlockGen)) *testBackend {
	var (
		cacheConfig = &core.CacheConfig{
			TrieCleanLimit:    256,
			TrieDirtyLimit:    256,
			TrieTimeLimit:     5 * time.Minute,
			SnapshotLimit:     0,
			TrieDirtyDisabled: true, // Archive mode
		}
	)
	// Generate blocks for testing
	db, blocks, _ := core.GenerateChainWithGenesis(gspec, engine, n, generator)
	txlookupLimit := uint64(0)
	chain, err := core.NewBlockChain(db, cacheConfig, gspec, engine, vm.Config{}, nil, &txlookupLimit)
	if err != nil {
		t.Fatalf("failed to create tester chain: %v", err)
	}
	if n, err := chain.InsertChain(blocks); err != nil {
		t.Fatalf("block %d: failed to insert into chain: %v", n, err)
	}

	backend := &testBackend{db: db, chain: chain}
	return backend
}

func (b *testBackend) setPendingBlock(block *types.Block) {
	b.pending = block
}

func (b testBackend) SyncProgress() zond.SyncProgress { return zond.SyncProgress{} }
func (b testBackend) SuggestGasTipCap(ctx context.Context) (*big.Int, error) {
	return big.NewInt(0), nil
}
func (b testBackend) FeeHistory(ctx context.Context, blockCount uint64, lastBlock rpc.BlockNumber, rewardPercentiles []float64) (*big.Int, [][]*big.Int, []*big.Int, []float64, error) {
	return nil, nil, nil, nil, nil
}
func (b testBackend) ChainDb() zonddb.Database          { return b.db }
func (b testBackend) AccountManager() *accounts.Manager { return nil }
func (b testBackend) ExtRPCEnabled() bool               { return false }
func (b testBackend) RPCGasCap() uint64                 { return 10000000 }
func (b testBackend) RPCEVMTimeout() time.Duration      { return time.Second }
func (b testBackend) RPCTxFeeCap() float64              { return 0 }
func (b testBackend) SetHead(number uint64)             {}
func (b testBackend) HeaderByNumber(ctx context.Context, number rpc.BlockNumber) (*types.Header, error) {
	if number == rpc.LatestBlockNumber {
		return b.chain.CurrentBlock(), nil
	}
	if number == rpc.PendingBlockNumber && b.pending != nil {
		return b.pending.Header(), nil
	}
	return b.chain.GetHeaderByNumber(uint64(number)), nil
}
func (b testBackend) HeaderByHash(ctx context.Context, hash common.Hash) (*types.Header, error) {
	return b.chain.GetHeaderByHash(hash), nil
}
func (b testBackend) HeaderByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*types.Header, error) {
	if blockNr, ok := blockNrOrHash.Number(); ok {
		return b.HeaderByNumber(ctx, blockNr)
	}
	if blockHash, ok := blockNrOrHash.Hash(); ok {
		return b.HeaderByHash(ctx, blockHash)
	}
	panic("unknown type rpc.BlockNumberOrHash")
}
func (b testBackend) CurrentHeader() *types.Header { return b.chain.CurrentBlock() }
func (b testBackend) CurrentBlock() *types.Header  { return b.chain.CurrentBlock() }
func (b testBackend) BlockByNumber(ctx context.Context, number rpc.BlockNumber) (*types.Block, error) {
	if number == rpc.LatestBlockNumber {
		head := b.chain.CurrentBlock()
		return b.chain.GetBlock(head.Hash(), head.Number.Uint64()), nil
	}
	if number == rpc.PendingBlockNumber {
		return b.pending, nil
	}
	return b.chain.GetBlockByNumber(uint64(number)), nil
}
func (b testBackend) BlockByHash(ctx context.Context, hash common.Hash) (*types.Block, error) {
	return b.chain.GetBlockByHash(hash), nil
}
func (b testBackend) BlockByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*types.Block, error) {
	if blockNr, ok := blockNrOrHash.Number(); ok {
		return b.BlockByNumber(ctx, blockNr)
	}
	if blockHash, ok := blockNrOrHash.Hash(); ok {
		return b.BlockByHash(ctx, blockHash)
	}
	panic("unknown type rpc.BlockNumberOrHash")
}
func (b testBackend) GetBody(ctx context.Context, hash common.Hash, number rpc.BlockNumber) (*types.Body, error) {
	return b.chain.GetBlock(hash, uint64(number.Int64())).Body(), nil
}
func (b testBackend) StateAndHeaderByNumber(ctx context.Context, number rpc.BlockNumber) (*state.StateDB, *types.Header, error) {
	if number == rpc.PendingBlockNumber {
		panic("pending state not implemented")
	}
	header, err := b.HeaderByNumber(ctx, number)
	if err != nil {
		return nil, nil, err
	}
	if header == nil {
		return nil, nil, errors.New("header not found")
	}
	stateDb, err := b.chain.StateAt(header.Root)
	return stateDb, header, err
}
func (b testBackend) StateAndHeaderByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*state.StateDB, *types.Header, error) {
	if blockNr, ok := blockNrOrHash.Number(); ok {
		return b.StateAndHeaderByNumber(ctx, blockNr)
	}
	panic("only implemented for number")
}
func (b testBackend) Pending() (*types.Block, types.Receipts, *state.StateDB) { panic("implement me") }
func (b testBackend) GetReceipts(ctx context.Context, hash common.Hash) (types.Receipts, error) {
	header, err := b.HeaderByHash(ctx, hash)
	if header == nil || err != nil {
		return nil, err
	}
	receipts := rawdb.ReadReceipts(b.db, hash, header.Number.Uint64(), header.Time, b.chain.Config())
	return receipts, nil
}

func (b testBackend) GetEVM(ctx context.Context, msg *core.Message, state *state.StateDB, header *types.Header, vmConfig *vm.Config, blockContext *vm.BlockContext) (*vm.EVM, func() error) {
	vmError := func() error { return nil }
	if vmConfig == nil {
		vmConfig = b.chain.GetVMConfig()
	}
	txContext := core.NewEVMTxContext(msg)
	context := core.NewEVMBlockContext(header, b.chain, nil)
	if blockContext != nil {
		context = *blockContext
	}
	return vm.NewEVM(context, txContext, state, b.chain.Config(), *vmConfig), vmError
}
func (b testBackend) SubscribeChainEvent(ch chan<- core.ChainEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SubscribeChainHeadEvent(ch chan<- core.ChainHeadEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SubscribeChainSideEvent(ch chan<- core.ChainSideEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SendTx(ctx context.Context, signedTx *types.Transaction) error {
	panic("implement me")
}
func (b testBackend) GetTransaction(ctx context.Context, txHash common.Hash) (*types.Transaction, common.Hash, uint64, uint64, error) {
	tx, blockHash, blockNumber, index := rawdb.ReadTransaction(b.db, txHash)
	return tx, blockHash, blockNumber, index, nil
}
func (b testBackend) GetPoolTransactions() (types.Transactions, error)         { panic("implement me") }
func (b testBackend) GetPoolTransaction(txHash common.Hash) *types.Transaction { panic("implement me") }
func (b testBackend) GetPoolNonce(ctx context.Context, addr common.Address) (uint64, error) {
	panic("implement me")
}
func (b testBackend) Stats() (pending int, queued int) { panic("implement me") }
func (b testBackend) TxPoolContent() (map[common.Address][]*types.Transaction, map[common.Address][]*types.Transaction) {
	panic("implement me")
}
func (b testBackend) TxPoolContentFrom(addr common.Address) ([]*types.Transaction, []*types.Transaction) {
	panic("implement me")
}
func (b testBackend) SubscribeNewTxsEvent(events chan<- core.NewTxsEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) ChainConfig() *params.ChainConfig { return b.chain.Config() }
func (b testBackend) Engine() consensus.Engine         { return b.chain.Engine() }
func (b testBackend) GetLogs(ctx context.Context, blockHash common.Hash, number uint64) ([][]*types.Log, error) {
	panic("implement me")
}
func (b testBackend) SubscribeRemovedLogsEvent(ch chan<- core.RemovedLogsEvent) event.Subscription {
	panic("implement me")
}
func (b testBackend) SubscribeLogsEvent(ch chan<- []*types.Log) event.Subscription {
	panic("implement me")
}
func (b testBackend) SubscribePendingLogsEvent(ch chan<- []*types.Log) event.Subscription {
	panic("implement me")
}
func (b testBackend) BloomStatus() (uint64, uint64) { panic("implement me") }
func (b testBackend) ServiceFilter(ctx context.Context, session *bloombits.MatcherSession) {
	panic("implement me")
}

func TestEstimateGas(t *testing.T) {
	t.Parallel()
	// Initialize test accounts
	var (
		accounts = newAccounts(2)
		genesis  = &core.Genesis{
			Config: params.TestChainConfig,
			Alloc: core.GenesisAlloc{
				accounts[0].addr: {Balance: big.NewInt(params.Ether)},
				accounts[1].addr: {Balance: big.NewInt(params.Ether)},
			},
		}
		genBlocks      = 10
		signer         = types.ShanghaiSigner{ChainId: big.NewInt(1)}
		randomAccounts = newAccounts(2)
	)
	api := NewBlockChainAPI(newTestBackend(t, genBlocks, genesis, beacon.NewFaker(), func(i int, b *core.BlockGen) {
		// Transfer from account[0] to account[1]
		//    value: 1000 wei
		//    fee:   0 wei
		tx, _ := types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &accounts[1].addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), signer, accounts[0].key)
		b.AddTx(tx)
	}))
	var testSuite = []struct {
		blockNumber rpc.BlockNumber
		call        TransactionArgs
		overrides   StateOverride
		expectErr   error
		want        uint64
	}{
		// simple transfer on latest block
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      21000,
		},
		// simple transfer with insufficient funds on latest block
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: core.ErrInsufficientFunds,
			want:      21000,
		},
		// empty create
		{
			blockNumber: rpc.LatestBlockNumber,
			call:        TransactionArgs{},
			expectErr:   nil,
			want:        53000,
		},
		{
			blockNumber: rpc.LatestBlockNumber,
			call:        TransactionArgs{},
			overrides: StateOverride{
				randomAccounts[0].addr: OverrideAccount{Balance: newRPCBalance(new(big.Int).Mul(big.NewInt(1), big.NewInt(params.Ether)))},
			},
			expectErr: nil,
			want:      53000,
		},
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &randomAccounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			overrides: StateOverride{
				randomAccounts[0].addr: OverrideAccount{Balance: newRPCBalance(big.NewInt(0))},
			},
			expectErr: core.ErrInsufficientFunds,
		},
	}
	for i, tc := range testSuite {
		result, err := api.EstimateGas(context.Background(), tc.call, &rpc.BlockNumberOrHash{BlockNumber: &tc.blockNumber}, &tc.overrides)
		if tc.expectErr != nil {
			if err == nil {
				t.Errorf("test %d: want error %v, have nothing", i, tc.expectErr)
				continue
			}
			if !errors.Is(err, tc.expectErr) {
				t.Errorf("test %d: error mismatch, want %v, have %v", i, tc.expectErr, err)
			}
			continue
		}
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		if uint64(result) != tc.want {
			t.Errorf("test %d, result mismatch, have\n%v\n, want\n%v\n", i, uint64(result), tc.want)
		}
	}
}

func TestCall(t *testing.T) {
	t.Parallel()
	// Initialize test accounts
	var (
		accounts = newAccounts(3)
		genesis  = &core.Genesis{
			Config: params.TestChainConfig,
			Alloc: core.GenesisAlloc{
				accounts[0].addr: {Balance: big.NewInt(params.Ether)},
				accounts[1].addr: {Balance: big.NewInt(params.Ether)},
				accounts[2].addr: {Balance: big.NewInt(params.Ether)},
			},
		}
		genBlocks = 10
		signer    = types.ShanghaiSigner{ChainId: big.NewInt(1)}
	)
	api := NewBlockChainAPI(newTestBackend(t, genBlocks, genesis, beacon.NewFaker(), func(i int, b *core.BlockGen) {
		// Transfer from account[0] to account[1]
		//    value: 1000 wei
		//    fee:   0 wei
		tx, _ := types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &accounts[1].addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), signer, accounts[0].key)
		b.AddTx(tx)
	}))
	randomAccounts := newAccounts(3)
	var testSuite = []struct {
		blockNumber    rpc.BlockNumber
		overrides      StateOverride
		call           TransactionArgs
		blockOverrides BlockOverrides
		expectErr      error
		want           string
	}{
		// transfer on genesis
		{
			blockNumber: rpc.BlockNumber(0),
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      "0x",
		},
		// transfer on the head
		{
			blockNumber: rpc.BlockNumber(genBlocks),
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      "0x",
		},
		// transfer on a non-existent block, error expects
		{
			blockNumber: rpc.BlockNumber(genBlocks + 1),
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: errors.New("header not found"),
		},
		// transfer on the latest block
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &accounts[0].addr,
				To:    &accounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: nil,
			want:      "0x",
		},
		// Call which can only succeed if state is state overridden
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &randomAccounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			overrides: StateOverride{
				randomAccounts[0].addr: OverrideAccount{Balance: newRPCBalance(new(big.Int).Mul(big.NewInt(1), big.NewInt(params.Ether)))},
			},
			want: "0x",
		},
		// Invalid call without state overriding
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From:  &randomAccounts[0].addr,
				To:    &randomAccounts[1].addr,
				Value: (*hexutil.Big)(big.NewInt(1000)),
			},
			expectErr: core.ErrInsufficientFunds,
		},
		// Successful simple contract call
		//
		// // SPDX-License-Identifier: GPL-3.0
		//
		//  pragma solidity >=0.7.0 <0.8.0;
		//
		//  /**
		//   * @title Storage
		//   * @dev Store & retrieve value in a variable
		//   */
		//  contract Storage {
		//      uint256 public number;
		//      constructor() {
		//          number = block.number;
		//      }
		//  }
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From: &randomAccounts[0].addr,
				To:   &randomAccounts[2].addr,
				Data: hex2Bytes("8381f58a"), // call number()
			},
			overrides: StateOverride{
				randomAccounts[2].addr: OverrideAccount{
					Code:      hex2Bytes("6080604052348015600f57600080fd5b506004361060285760003560e01c80638381f58a14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea2646970667358221220eab35ffa6ab2adfe380772a48b8ba78e82a1b820a18fcb6f59aa4efb20a5f60064736f6c63430007040033"),
					StateDiff: &map[common.Hash]common.Hash{{}: common.BigToHash(big.NewInt(123))},
				},
			},
			want: "0x000000000000000000000000000000000000000000000000000000000000007b",
		},
		// Block overrides should work
		{
			blockNumber: rpc.LatestBlockNumber,
			call: TransactionArgs{
				From: &accounts[1].addr,
				Input: &hexutil.Bytes{
					0x43,             // NUMBER
					0x60, 0x00, 0x52, // MSTORE offset 0
					0x60, 0x20, 0x60, 0x00, 0xf3,
				},
			},
			blockOverrides: BlockOverrides{Number: (*hexutil.Big)(big.NewInt(11))},
			want:           "0x000000000000000000000000000000000000000000000000000000000000000b",
		},
	}
	for i, tc := range testSuite {
		result, err := api.Call(context.Background(), tc.call, rpc.BlockNumberOrHash{BlockNumber: &tc.blockNumber}, &tc.overrides, &tc.blockOverrides)
		if tc.expectErr != nil {
			if err == nil {
				t.Errorf("test %d: want error %v, have nothing", i, tc.expectErr)
				continue
			}
			if !errors.Is(err, tc.expectErr) {
				// Second try
				if !reflect.DeepEqual(err, tc.expectErr) {
					t.Errorf("test %d: error mismatch, want %v, have %v", i, tc.expectErr, err)
				}
			}
			continue
		}
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		if !reflect.DeepEqual(result.String(), tc.want) {
			t.Errorf("test %d, result mismatch, have\n%v\n, want\n%v\n", i, result.String(), tc.want)
		}
	}
}

type Account struct {
	key  *dilithium.Dilithium
	addr common.Address
}

func newAccounts(n int) (accounts []Account) {
	for i := 0; i < n; i++ {
		key, _ := crypto.GenerateDilithiumKey()
		addr := key.GetAddress()
		accounts = append(accounts, Account{key: key, addr: addr})
	}
	slices.SortFunc(accounts, func(a, b Account) int { return a.addr.Cmp(b.addr) })
	return accounts
}

func newRPCBalance(balance *big.Int) **hexutil.Big {
	rpcBalance := (*hexutil.Big)(balance)
	return &rpcBalance
}

func hex2Bytes(str string) *hexutil.Bytes {
	rpcBytes := hexutil.Bytes(common.Hex2Bytes(str))
	return &rpcBytes
}

func TestRPCMarshalBlock(t *testing.T) {
	t.Parallel()
	var (
		txs []*types.Transaction
		to  = common.BytesToAddress([]byte{0x11})
	)
	for i := uint64(1); i <= 4; i++ {
		var tx *types.Transaction
		if i%2 == 0 {
			tx = types.NewTx(&types.DynamicFeeTx{
				Nonce:     i,
				GasFeeCap: big.NewInt(11111),
				Gas:       1111,
				To:        &to,
				Value:     big.NewInt(111),
				Data:      []byte{0x11, 0x11, 0x11},
			})
			// TODO(rgeraldes24): legacy tx
			/*
				tx = types.NewTx(&types.LegacyTx{
					Nonce:    i,
					GasPrice: big.NewInt(11111),
					Gas:      1111,
					To:       &to,
					Value:    big.NewInt(111),
					Data:     []byte{0x11, 0x11, 0x11},
				})
			*/
		} else {
			// TODO(rgeraldes24)
			/*
				tx = types.NewTx(&types.AccessListTx{
					ChainID:  big.NewInt(1337),
					Nonce:    i,
					GasPrice: big.NewInt(11111),
					Gas:      1111,
					To:       &to,
					Value:    big.NewInt(111),
					Data:     []byte{0x11, 0x11, 0x11},
				})
			*/
		}
		txs = append(txs, tx)
	}
	// block := types.NewBlock(&types.Header{Number: big.NewInt(100)}, txs, nil, blocktest.NewHasher())
	block := &types.Block{}

	var testSuite = []struct {
		inclTx bool
		fullTx bool
		want   string
	}{
		// TODO(rgeraldes24): fix
		/*
			// without txs
			{
				inclTx: false,
				fullTx: false,
				want: `{
					"extraData": "0x",
					"gasLimit": "0x0",
					"gasUsed": "0x0",
					"hash": "0xde4b1d5f0dc759618ba19fa2a7f38bb232d35d54b15b26db4b1ed2b1381e75d5",
					"logsBloom": "0x
					"miner": "0x0000000000000000000000000000000000000000",
					"number": "0x64",
					"parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"prevRandao": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
					"size": "0x72dd",
					"stateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
					"timestamp": "0x0",
					"transactionsRoot": "0x271e3954e667d43c0f3d8605faca9051a470765eddd967425590e38383d77973"
				}`,
			},
			// only tx hashes
			{
				inclTx: true,
				fullTx: false,
				want: `{
						"extraData": "0x",
						"gasLimit": "0x0",
						"gasUsed": "0x0",
						"hash": "0xde4b1d5f0dc759618ba19fa2a7f38bb232d35d54b15b26db4b1ed2b1381e75d5",
						"logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
						"miner": "0x0000000000000000000000000000000000000000",
						"number": "0x64",
						"parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
						"prevRandao": "0x0000000000000000000000000000000000000000000000000000000000000000",
						"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
						"size": "0x72dd",
						"stateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
						"timestamp": "0x0",
						"transactions": [
							"0x1fb5fb2f16942fa335b33611b642f71c3de6f4f1c37dcdab0c76fcc9a1fe1b5a",
							"0x2a181750debd4311025178efe71cac30116c055bdec2d1feb0750d69bf93e684",
							"0xbc8662f8cd68ce488325b0d94d8d9c250b9a5570281b69e7ecb8204b5209ecb3",
							"0x9733fac71942cf3e96c4b519a884cb87437711fa94e35af7de48d99ef096f134"
						],
						"transactionsRoot": "0x271e3954e667d43c0f3d8605faca9051a470765eddd967425590e38383d77973"
					}`,
			},
			// full tx details
			{
				inclTx: true,
				fullTx: true,
				want: `{
						"extraData": "0x",
						"gasLimit": "0x0",
						"gasUsed": "0x0",
						"hash": "0xde4b1d5f0dc759618ba19fa2a7f38bb232d35d54b15b26db4b1ed2b1381e75d5",
						"logsBloom": "0x
						"miner": "0x0000000000000000000000000000000000000000",
						"number": "0x64",
						"parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
						"prevRandao": "0x0000000000000000000000000000000000000000000000000000000000000000",
						"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
						"size": "0x72dd",
						"stateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
						"timestamp": "0x0",
						"transactions": [
							{
								"blockHash": "0xde4b1d5f0dc759618ba19fa2a7f38bb232d35d54b15b26db4b1ed2b1381e75d5",
								"blockNumber": "0x64",
								"from": "0x0000000000000000000000000000000000000000",
								"gas": "0x457",
								"gasPrice": "0x2b67",
								"hash": "0x1fb5fb2f16942fa335b33611b642f71c3de6f4f1c37dcdab0c76fcc9a1fe1b5a",
								"input": "0x111111",
								"nonce": "0x1",
								"to": "0x0000000000000000000000000000000000000011",
								"transactionIndex": "0x0",
								"value": "0x6f",
								"type": "0x1",
								"accessList": [],
								"chainId": "0x539",
								"publicKey": "0x
								"signature": "

							},
							{
								"accessList": [],
								"blockHash": "0xde4b1d5f0dc759618ba19fa2a7f38bb232d35d54b15b26db4b1ed2b1381e75d5",
								"blockNumber": "0x64",
								"from": "0x0000000000000000000000000000000000000000",
								"gas": "0x457",
								"gasPrice": "0x2b67",
								"hash": "0x2a181750debd4311025178efe71cac30116c055bdec2d1feb0750d69bf93e684",
								"input": "0x111111",
								"maxFeePerGas": "0x2b67",
								"maxPriorityFeePerGas": "0x0",
								"nonce": "0x2",
								"to": "0x0000000000000000000000000000000000000011",
								"transactionIndex": "0x1",
								"value": "0x6f",
								"type": "0x2",
								"chainId": "0x0",
								"publicKey": "0x
								"signature": "
							},
							{
								"blockHash": "0xde4b1d5f0dc759618ba19fa2a7f38bb232d35d54b15b26db4b1ed2b1381e75d5",
								"blockNumber": "0x64",
								"from": "0x0000000000000000000000000000000000000000",
								"gas": "0x457",
								"gasPrice": "0x2b67",
								"hash": "0xbc8662f8cd68ce488325b0d94d8d9c250b9a5570281b69e7ecb8204b5209ecb3",
								"input": "0x111111",
								"nonce": "0x3",
								"to": "0x0000000000000000000000000000000000000011",
								"transactionIndex": "0x2",
								"value": "0x6f",
								"type": "0x1",
								"accessList": [],
								"chainId": "0x539",
								"publicKey": "0x
								"signature": "
							},
							{
								"accessList": [],
								"blockHash": "0xde4b1d5f0dc759618ba19fa2a7f38bb232d35d54b15b26db4b1ed2b1381e75d5",
								"blockNumber": "0x64",
								"from": "0x0000000000000000000000000000000000000000",
								"gas": "0x457",
								"gasPrice": "0x2b67",
								"hash": "0x9733fac71942cf3e96c4b519a884cb87437711fa94e35af7de48d99ef096f134",
								"input": "0x111111",
								"maxFeePerGas": "0x2b67",
								"maxPriorityFeePerGas": "0x0",
								"nonce": "0x4",
								"to": "0x0000000000000000000000000000000000000011",
								"transactionIndex": "0x3",
								"value": "0x6f",
								"type": "0x2",
								"chainId": "0x0",
								"publicKey": "0x
								"signature": "0x
							}
						],
						"transactionsRoot": "0x271e3954e667d43c0f3d8605faca9051a470765eddd967425590e38383d77973"
					}`,
			},
		*/
	}

	for i, tc := range testSuite {
		resp := RPCMarshalBlock(block, tc.inclTx, tc.fullTx, params.MainnetChainConfig)
		out, err := json.Marshal(resp)
		if err != nil {
			t.Errorf("test %d: json marshal error: %v", i, err)
			continue
		}
		require.JSONEqf(t, tc.want, string(out), "test %d", i)
	}
}

func TestRPCGetBlockOrHeader(t *testing.T) {
	t.Parallel()

	// Initialize test accounts
	var (
		acc1Key, _                = pqcrypto.HexToDilithium("8a1f9a8f95be41cd7ccb6168179afb4504aefe388d1e14474d32c45c72ce7b7a")
		acc2Key, _                = pqcrypto.HexToDilithium("49a7b37aa6f6645917e7b807e9d1c00d4fa71f18343b0d4122a4d2df64dd6fee")
		acc1Addr                  = acc1Key.GetAddress()
		acc2Addr   common.Address = acc2Key.GetAddress()
		genesis                   = &core.Genesis{
			Config: params.TestChainConfig,
			Alloc: core.GenesisAlloc{
				acc1Addr: {Balance: big.NewInt(params.Ether)},
				acc2Addr: {Balance: big.NewInt(params.Ether)},
			},
		}
		genBlocks = 10
		signer    = types.ShanghaiSigner{ChainId: big.NewInt(1)}
		tx        = types.NewTx(&types.DynamicFeeTx{
			Nonce:     11,
			GasFeeCap: big.NewInt(0),
			Gas:       1111,
			To:        &acc2Addr,
			Value:     big.NewInt(111),
			Data:      []byte{0x11, 0x11, 0x11},
		})
		withdrawal = &types.Withdrawal{
			Index:     0,
			Validator: 1,
			Address:   common.Address{0x12, 0x34},
			Amount:    10,
		}
		pending = types.NewBlockWithWithdrawals(&types.Header{Number: big.NewInt(11), Time: 42}, []*types.Transaction{tx}, nil, []*types.Withdrawal{withdrawal}, blocktest.NewHasher())
	)
	backend := newTestBackend(t, genBlocks, genesis, beacon.NewFaker(), func(i int, b *core.BlockGen) {
		// Transfer from account[0] to account[1]
		//    value: 1000 wei
		//    fee:   0 wei
		tx, _ := types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &acc2Addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), signer, acc1Key)
		b.AddTx(tx)
	})
	backend.setPendingBlock(pending)
	api := NewBlockChainAPI(backend)
	blockHashes := make([]common.Hash, genBlocks+1)
	ctx := context.Background()
	for i := 0; i <= genBlocks; i++ {
		header, err := backend.HeaderByNumber(ctx, rpc.BlockNumber(i))
		if err != nil {
			t.Errorf("failed to get block: %d err: %v", i, err)
		}
		blockHashes[i] = header.Hash()
	}
	pendingHash := pending.Hash()

	var testSuite = []struct {
		blockNumber rpc.BlockNumber
		blockHash   *common.Hash
		fullTx      bool
		reqHeader   bool
		file        string
		expectErr   error
	}{
		// 0. latest header
		{
			blockNumber: rpc.LatestBlockNumber,
			reqHeader:   true,
			file:        "tag-latest",
		},
		// 1. genesis header
		{
			blockNumber: rpc.BlockNumber(0),
			reqHeader:   true,
			file:        "number-0",
		},
		// 2. #1 header
		{
			blockNumber: rpc.BlockNumber(1),
			reqHeader:   true,
			file:        "number-1",
		},
		// 3. latest-1 header
		{
			blockNumber: rpc.BlockNumber(9),
			reqHeader:   true,
			file:        "number-latest-1",
		},
		// 4. latest+1 header
		{
			blockNumber: rpc.BlockNumber(11),
			reqHeader:   true,
			file:        "number-latest+1",
		},
		// 5. pending header
		{
			blockNumber: rpc.PendingBlockNumber,
			reqHeader:   true,
			file:        "tag-pending",
		},
		// TODO(rgeraldes24): removed the blob tx from the receipts backend for the block number 5
		// hence why this test fails
		/*
			// 6. latest block
			{
				blockNumber: rpc.LatestBlockNumber,
				file:        "tag-latest",
			},
		*/
		// 7. genesis block
		{
			blockNumber: rpc.BlockNumber(0),
			file:        "number-0",
		},
		// 8. #1 block
		{
			blockNumber: rpc.BlockNumber(1),
			file:        "number-1",
		},
		// 9. latest-1 block
		{
			blockNumber: rpc.BlockNumber(9),
			fullTx:      true,
			file:        "number-latest-1",
		},
		// 10. latest+1 block
		{
			blockNumber: rpc.BlockNumber(11),
			fullTx:      true,
			file:        "number-latest+1",
		},
		// 11. pending block
		{
			blockNumber: rpc.PendingBlockNumber,
			file:        "tag-pending",
		},
		// 12. pending block + fullTx
		{
			blockNumber: rpc.PendingBlockNumber,
			fullTx:      true,
			file:        "tag-pending-fullTx",
		},
		// 13. latest header by hash
		{
			blockHash: &blockHashes[len(blockHashes)-1],
			reqHeader: true,
			file:      "hash-latest",
		},
		// 14. genesis header by hash
		{
			blockHash: &blockHashes[0],
			reqHeader: true,
			file:      "hash-0",
		},
		// 15. #1 header
		{
			blockHash: &blockHashes[1],
			reqHeader: true,
			file:      "hash-1",
		},
		// 16. latest-1 header
		{
			blockHash: &blockHashes[len(blockHashes)-2],
			reqHeader: true,
			file:      "hash-latest-1",
		},
		// 17. empty hash
		{
			blockHash: &common.Hash{},
			reqHeader: true,
			file:      "hash-empty",
		},
		// 18. pending hash
		{
			blockHash: &pendingHash,
			reqHeader: true,
			file:      `hash-pending`,
		},
		// 19. latest block
		{
			blockHash: &blockHashes[len(blockHashes)-1],
			file:      "hash-latest",
		},
		// 20. genesis block
		{
			blockHash: &blockHashes[0],
			file:      "hash-genesis",
		},
		// 21. #1 block
		{
			blockHash: &blockHashes[1],
			file:      "hash-1",
		},
		// 22. latest-1 block
		{
			blockHash: &blockHashes[len(blockHashes)-2],
			fullTx:    true,
			file:      "hash-latest-1-fullTx",
		},
		// 23. empty hash + body
		{
			blockHash: &common.Hash{},
			fullTx:    true,
			file:      "hash-empty-fullTx",
		},
		// 24. pending block
		{
			blockHash: &pendingHash,
			file:      `hash-pending`,
		},
		// 25. pending block + fullTx
		{
			blockHash: &pendingHash,
			fullTx:    true,
			file:      "hash-pending-fullTx",
		},
	}

	for i, tt := range testSuite {
		var (
			result map[string]interface{}
			err    error
			rpc    string
		)
		if tt.blockHash != nil {
			if tt.reqHeader {
				result = api.GetHeaderByHash(context.Background(), *tt.blockHash)
				rpc = "zond_getHeaderByHash"
			} else {
				result, err = api.GetBlockByHash(context.Background(), *tt.blockHash, tt.fullTx)
				rpc = "zond_getBlockByHash"
			}
		} else {
			if tt.reqHeader {
				result, err = api.GetHeaderByNumber(context.Background(), tt.blockNumber)
				rpc = "zond_getHeaderByNumber"
			} else {
				result, err = api.GetBlockByNumber(context.Background(), tt.blockNumber, tt.fullTx)
				rpc = "zond_getBlockByNumber"
			}
		}
		if tt.expectErr != nil {
			if err == nil {
				t.Errorf("test %d: want error %v, have nothing", i, tt.expectErr)
				continue
			}
			if !errors.Is(err, tt.expectErr) {
				t.Errorf("test %d: error mismatch, want %v, have %v", i, tt.expectErr, err)
			}
			continue
		}
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}

		testRPCResponseWithFile(t, i, result, rpc, tt.file)
	}
}

func setupReceiptBackend(t *testing.T, genBlocks int) (*testBackend, []common.Hash) {
	config := *params.TestChainConfig
	var (
		acc1Key, _                = pqcrypto.HexToDilithium("8a1f9a8f95be41cd7ccb6168179afb4504aefe388d1e14474d32c45c72ce7b7a")
		acc2Key, _                = pqcrypto.HexToDilithium("49a7b37aa6f6645917e7b807e9d1c00d4fa71f18343b0d4122a4d2df64dd6fee")
		acc1Addr                  = acc1Key.GetAddress()
		acc2Addr   common.Address = acc2Key.GetAddress()
		contract                  = common.HexToAddress("0000000000000000000000000000000000031ec7")
		genesis                   = &core.Genesis{
			Config: &config,
			Alloc: core.GenesisAlloc{
				acc1Addr: {Balance: big.NewInt(params.Ether)},
				acc2Addr: {Balance: big.NewInt(params.Ether)},
				// // SPDX-License-Identifier: GPL-3.0
				// pragma solidity >=0.7.0 <0.9.0;
				//
				// contract Token {
				//     event Transfer(address indexed from, address indexed to, uint256 value);
				//     function transfer(address to, uint256 value) public returns (bool) {
				//         emit Transfer(msg.sender, to, value);
				//         return true;
				//     }
				// }
				contract: {Balance: big.NewInt(params.Ether), Code: common.FromHex("0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004a6004803603810190610045919061016a565b610060565b60405161005791906101c5565b60405180910390f35b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516100bf91906101ef565b60405180910390a36001905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610101826100d6565b9050919050565b610111816100f6565b811461011c57600080fd5b50565b60008135905061012e81610108565b92915050565b6000819050919050565b61014781610134565b811461015257600080fd5b50565b6000813590506101648161013e565b92915050565b60008060408385031215610181576101806100d1565b5b600061018f8582860161011f565b92505060206101a085828601610155565b9150509250929050565b60008115159050919050565b6101bf816101aa565b82525050565b60006020820190506101da60008301846101b6565b92915050565b6101e981610134565b82525050565b600060208201905061020460008301846101e0565b9291505056fea2646970667358221220b469033f4b77b9565ee84e0a2f04d496b18160d26034d54f9487e57788fd36d564736f6c63430008120033")},
			},
		}
		signer   = types.LatestSignerForChainID(params.TestChainConfig.ChainID)
		txHashes = make([]common.Hash, genBlocks)
	)

	backend := newTestBackend(t, genBlocks, genesis, beacon.New(), func(i int, b *core.BlockGen) {
		var (
			tx  *types.Transaction
			err error
		)
		switch i {
		case 0:
			// transfer 1000wei
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &acc2Addr, Value: big.NewInt(1000), Gas: params.TxGas, GasFeeCap: b.BaseFee(), Data: nil}), types.ShanghaiSigner{ChainId: big.NewInt(1)}, acc1Key)
		case 1:
			// create contract
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: nil, Gas: 53100, GasFeeCap: b.BaseFee(), Data: common.FromHex("0x60806040")}), signer, acc1Key)
		case 2:
			// with logs
			// transfer(address to, uint256 value)
			data := fmt.Sprintf("0xa9059cbb%s%s", common.HexToHash(common.BigToAddress(big.NewInt(int64(i + 1))).Hex()).String()[2:], common.BytesToHash([]byte{byte(i + 11)}).String()[2:])
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &contract, Gas: 60000, GasFeeCap: b.BaseFee(), Data: common.FromHex(data)}), signer, acc1Key)
		case 3:
			// dynamic fee with logs
			// transfer(address to, uint256 value)
			data := fmt.Sprintf("0xa9059cbb%s%s", common.HexToHash(common.BigToAddress(big.NewInt(int64(i + 1))).Hex()).String()[2:], common.BytesToHash([]byte{byte(i + 11)}).String()[2:])
			fee := big.NewInt(500)
			fee.Add(fee, b.BaseFee())
			tx, err = types.SignTx(types.NewTx(&types.DynamicFeeTx{Nonce: uint64(i), To: &contract, Gas: 60000, Value: big.NewInt(1), GasTipCap: big.NewInt(500), GasFeeCap: fee, Data: common.FromHex(data)}), signer, acc1Key)
		case 4:
			// TODO(rgeraldes24)
			// access list with contract create
			// accessList := types.AccessList{{
			// 	Address:     contract,
			// 	StorageKeys: []common.Hash{{0}},
			// }}
			// tx, err = types.SignTx(types.NewTx(&types.AccessListTx{Nonce: uint64(i), To: nil, Gas: 58100, GasPrice: b.BaseFee(), Data: common.FromHex("0x60806040"), AccessList: accessList}), signer, acc1Key)
		}
		if err != nil {
			t.Errorf("failed to sign tx: %v", err)
		}
		if tx != nil {
			b.AddTx(tx)
			txHashes[i] = tx.Hash()
		}
	})
	return backend, txHashes
}

/*
func TestRPCGetTransactionReceipt(t *testing.T) {
	t.Parallel()

	var (
		backend, txHashes = setupReceiptBackend(t, 6)
		api               = NewTransactionAPI(backend, new(AddrLocker))
	)

	var testSuite = []struct {
		txHash common.Hash
		file   string
	}{
		// 0. normal success
		{
			txHash: txHashes[0],
			file:   "normal-transfer-tx",
		},
		// 1. create contract
		{
			txHash: txHashes[1],
			file:   "create-contract-tx",
		},
		// 2. with logs success
		{
			txHash: txHashes[2],
			file:   "with-logs",
		},
		// 3. dynamic tx with logs success
		{
			txHash: txHashes[3],
			file:   `dynamic-tx-with-logs`,
		},
		// 4. access list tx with create contract
		{
			txHash: txHashes[4],
			file:   "create-contract-with-access-list",
		},
		// 5. txhash empty
		{
			txHash: common.Hash{},
			file:   "txhash-empty",
		},
		// 6. txhash not found
		{
			txHash: common.HexToHash("deadbeef"),
			file:   "txhash-notfound",
		},
	}

	for i, tt := range testSuite {
		var (
			result interface{}
			err    error
		)
		result, err = api.GetTransactionReceipt(context.Background(), tt.txHash)
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		testRPCResponseWithFile(t, i, result, "zond_getTransactionReceipt", tt.file)
	}
}
*/

// TODO(rgeraldes24): legacy txs
func TestRPCGetBlockReceipts(t *testing.T) {
	t.Parallel()

	var (
		genBlocks  = 6
		backend, _ = setupReceiptBackend(t, genBlocks)
		api        = NewBlockChainAPI(backend)
	)
	blockHashes := make([]common.Hash, genBlocks+1)
	ctx := context.Background()
	for i := 0; i <= genBlocks; i++ {
		header, err := backend.HeaderByNumber(ctx, rpc.BlockNumber(i))
		if err != nil {
			t.Errorf("failed to get block: %d err: %v", i, err)
		}
		blockHashes[i] = header.Hash()
	}

	var testSuite = []struct {
		test rpc.BlockNumberOrHash
		file string
	}{
		// 0. block without any txs(hash)
		{
			test: rpc.BlockNumberOrHashWithHash(blockHashes[0], false),
			file: "number-0",
		},
		// 1. block without any txs(number)
		{
			test: rpc.BlockNumberOrHashWithNumber(0),
			file: "number-1",
		},
		// 2. earliest tag
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.EarliestBlockNumber),
			file: "tag-earliest",
		},
		// TODO(rgeraldes24): removed the blob tx from the receipts backend for the block number 5
		// hence why this test fails
		/*
			// 3. latest tag
			{
				test: rpc.BlockNumberOrHashWithNumber(rpc.LatestBlockNumber),
				file: "tag-latest",
			},
		*/
		// 4. block with legacy transfer tx(hash)
		{
			test: rpc.BlockNumberOrHashWithHash(blockHashes[1], false),
			file: "block-with-legacy-transfer-tx",
		},
		// 5. block with contract create tx(number)
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.BlockNumber(2)),
			file: "block-with-contract-create-tx",
		},

		// 6. block with legacy contract call tx(hash)
		{
			test: rpc.BlockNumberOrHashWithHash(blockHashes[3], false),
			file: "block-with-legacy-contract-call-tx",
		},
		// 7. block with dynamic fee tx(number)
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.BlockNumber(4)),
			file: "block-with-dynamic-fee-tx",
		},
		// 8. block is empty
		{
			test: rpc.BlockNumberOrHashWithHash(common.Hash{}, false),
			file: "hash-empty",
		},
		// 9. block is not found
		{
			test: rpc.BlockNumberOrHashWithHash(common.HexToHash("deadbeef"), false),
			file: "hash-notfound",
		},
		// 10. block is not found
		{
			test: rpc.BlockNumberOrHashWithNumber(rpc.BlockNumber(genBlocks + 1)),
			file: "block-notfound",
		},
	}

	for i, tt := range testSuite {
		var (
			result interface{}
			err    error
		)
		result, err = api.GetBlockReceipts(context.Background(), tt.test)
		if err != nil {
			t.Errorf("test %d: want no error, have %v", i, err)
			continue
		}
		testRPCResponseWithFile(t, i, result, "zond_getBlockReceipts", tt.file)
	}
}

func testRPCResponseWithFile(t *testing.T, testid int, result interface{}, rpc string, file string) {
	data, err := json.MarshalIndent(result, "", "  ")
	if err != nil {
		t.Errorf("test %d: json marshal error", testid)
		return
	}
	outputFile := filepath.Join("testdata", fmt.Sprintf("%s-%s.json", rpc, file))
	if os.Getenv("WRITE_TEST_FILES") != "" {
		os.WriteFile(outputFile, data, 0644)
	}
	want, err := os.ReadFile(outputFile)
	if err != nil {
		t.Fatalf("error reading expected test file: %s output: %v", outputFile, err)
	}
	require.JSONEqf(t, string(want), string(data), "test %d: json not match, want: %s, have: %s", testid, string(want), string(data))
}
